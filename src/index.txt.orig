document.write("Hello world!");

var promise = new Promise((resolve) => {
    setTimeout(() => {
        console.log("Promise timeout hit");
        resolve(66);
    }, 500);
});

promise.then((x) => console.log("Then1", x));
promise.then((x) => console.log("Then2", x));

var source = new Rx.Observable.create((observer) => {
    console.log("Observer ", observer);
    var id = setTimeout(() => {
        console.log("Observable timeout hit");
        observer.onNext({ name: "test" });
    }, 500);

    return () => {
        clearTimeout(id);
        console.log("Disposing...");
    };
});

console.log("Source", source);

// var disposable = source.forEach(x => console.log("observable.forEach1", x));
var disposable = source
    .map(x => x+="!")
    .subscribe(
        (data) => console.log("Exito ", data)
    );
// setTimeout(() => {
//     disposable.dispose();
// }, 250);
source.forEach(x => console.log("observable.forEach2", x));

// class Animal {
//     walk() {
//         console.log("walking...");
//     };
// }
// var animal = new Animal();
// animal.walk();

// var a = Rx.Observable.fromArray([1,2,3,4,5,6]);
// var a = Rx.Observable.interval(500).take(10);
// a.filter((e) => {
//     console.log("Filtering ", e, a);
//     return e % 2 === 0;
// }).forEach((x) => console.log(x));

var a = Rx.Observable.create((observer) => {
    var id = setInterval(() => {
        console.log("interval");
        var result = Math.random();
        observer.onNext(parseInt(result * 100));
    }, 500);
    return () => {
        clearTimeout(id);
    }
});
// a.subscribe((val) => {
//     console.log(val);
// });
var disposable = a.filter(val => val % 2 === 0).forEach((val) => console.log(val));

setTimeout(() => {
    console.log("Disposing...");
    disposable.dispose();
}, 5000);
